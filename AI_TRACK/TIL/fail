cs 공부하기

[1] 배열과 링크드 리스트의 차이점은?
[2] TCP와 UDP의 차이점은?
[3] HTTP와 HTTPS의 차이점?
[4] 객체지향 프로그래밍의 4가지 주요 개념은 무엇인가?
[5] 상속과 다형성(Polymorphism)의 차이점은?
[6] SQL과 NoSQL의 차이는 무엇인가요?
[7] SQL에서 JOIN의 종류와 각각의 차이점은?
[8] 서브쿼리와 조인의 차이점은?

[1] 배열과 링크드 리스트의 차이점
배열 (Array):

고정 크기: 생성 시 배열의 크기가 결정되며, 이후에는 변경할 수 없습니다.
인덱스 접근: 특정 요소에 빠르게 접근할 수 있습니다 (O(1) 시간 복잡도).
메모리: 연속된 메모리 공간을 사용합니다.
삽입/삭제: 중간에 삽입하거나 삭제할 때 많은 요소를 이동시켜야 하므로 비효율적입니다 (O(n) 시간 복잡도).
링크드 리스트 (Linked List):

동적 크기: 노드를 추가하거나 삭제할 수 있어 크기를 유동적으로 조절할 수 있습니다.
연속 접근 불가: 요소에 접근할 때 노드를 순차적으로 탐색해야 하므로 느립니다 (O(n) 시간 복잡도).
메모리: 각 노드가 포인터를 가지고 있어 메모리 단편화가 있을 수 있습니다.
삽입/삭제: 노드를 추가하거나 삭제할 때 상대적으로 효율적입니다 (O(1) 시간 복잡도).
[2] TCP와 UDP의 차이점
TCP (Transmission Control Protocol):

연결 지향: 통신 전에 연결을 설정하고, 데이터 전송 후 연결을 종료합니다.
신뢰성: 데이터가 손실되거나 순서가 바뀌면 자동으로 재전송하고 순서를 맞춥니다.
속도: 신뢰성을 보장하는 과정이 필요하므로 상대적으로 느릴 수 있습니다.
UDP (User Datagram Protocol):

비연결 지향: 연결을 설정하지 않고 데이터그램 단위로 전송합니다.
신뢰성 없음: 데이터 손실, 중복, 순서 문제를 처리하지 않습니다.
속도: 신뢰성을 보장하지 않으므로 빠릅니다.
[3] HTTP와 HTTPS의 차이점
HTTP (Hypertext Transfer Protocol):

암호화 없음: 데이터가 평문으로 전송되므로 보안에 취약합니다.
포트: 기본적으로 80번 포트를 사용합니다.
HTTPS (Hypertext Transfer Protocol Secure):

암호화: SSL/TLS 프로토콜을 사용해 데이터 전송을 암호화하여 보안을 강화합니다.
포트: 기본적으로 443번 포트를 사용합니다.
[4] 객체지향 프로그래밍의 4가지 주요 개념
캡슐화 (Encapsulation): 데이터와 메서드를 하나의 단위(객체)로 묶고, 데이터의 접근을 제어합니다.
상속 (Inheritance): 기존 클래스(부모 클래스)의 속성과 메서드를 새로운 클래스(자식 클래스)에서 재사용할 수 있습니다.
다형성 (Polymorphism): 동일한 인터페이스로 서로 다른 데이터 타입을 처리할 수 있게 해줍니다. 메서드 오버로딩과 오버라이딩이 포함됩니다.
추상화 (Abstraction): 복잡한 시스템을 단순화하여 사용자에게 필요한 기능만을 제공하고, 내부 구현 세부사항은 숨깁니다.
[5] 상속과 다형성(Polymorphism)의 차이점
상속 (Inheritance):

정의: 한 클래스가 다른 클래스의 속성과 메서드를 상속받아 재사용하거나 확장합니다.
목적: 코드의 재사용과 계층적 관계 설정.
다형성 (Polymorphism):

정의: 동일한 인터페이스로 서로 다른 객체를 처리하거나, 같은 이름의 메서드가 서로 다른 동작을 하게 하는 것입니다.
목적: 코드의 유연성을 증가시키고, 다양한 객체를 동일한 방식으로 처리할 수 있게 합니다.
[6] SQL과 NoSQL의 차이
SQL (Structured Query Language):

구조: 관계형 데이터베이스 관리 시스템(RDBMS)에서 사용하는 표준 언어로, 테이블 기반 데이터 구조를 가지고 있습니다.
스키마: 고정된 스키마를 요구합니다.
쿼리: 복잡한 쿼리를 지원하고 ACID 트랜잭션을 보장합니다.
NoSQL (Not Only SQL):

구조: 비관계형 데이터베이스로, 다양한 데이터 모델(문서, 키-값, 컬럼 패밀리, 그래프 등)을 지원합니다.
스키마: 동적 스키마를 지원하거나 스키마가 없는 경우가 많습니다.
쿼리: 특정 쿼리 기능을 제공하며, CAP 정리를 통해 일관성, 가용성, 분산성을 지원합니다.
[7] SQL에서 JOIN의 종류와 각각의 차이점
INNER JOIN:
정의: 두 테이블의 교집합을 반환합니다. 두 테이블에서 일치하는 레코드만 포함됩니다.
LEFT JOIN (LEFT OUTER JOIN):
정의: 왼쪽 테이블의 모든 레코드와 오른쪽 테이블의 일치하는 레코드를 반환합니다. 오른쪽 테이블에 일치하는 레코드가 없으면 NULL을 반환합니다.
RIGHT JOIN (RIGHT OUTER JOIN):
정의: 오른쪽 테이블의 모든 레코드와 왼쪽 테이블의 일치하는 레코드를 반환합니다. 왼쪽 테이블에 일치하는 레코드가 없으면 NULL을 반환합니다.
FULL JOIN (FULL OUTER JOIN):
정의: 두 테이블의 모든 레코드를 반환합니다. 일치하는 레코드가 없는 경우 NULL을 반환합니다.
CROSS JOIN:
정의: 두 테이블의 모든 조합을 반환합니다. Cartesian Product를 생성합니다.
[8] 서브쿼리와 조인의 차이점
서브쿼리 (Subquery):

정의: 쿼리 안에 포함된 쿼리로, 외부 쿼리에 결과를 제공합니다.
용도: 종종 특정 조건을 만족하는 값을 찾거나, 중첩된 조건을 처리할 때 사용됩니다.
성능: 서브쿼리의 성능은 데이터베이스의 구현과 쿼리 최적화에 따라 달라질 수 있습니다.
조인 (Join):

정의: 두 개 이상의 테이블을 특정 조건에 따라 결합하여 결과를 반환합니다.
용도: 관련된 여러 테이블의 데이터를 결합하여 하나의 결과 집합을 생성합니다.
성능: 조인은 일반적으로 데이터베이스에서 최적화가 잘 되어 있으며, 대량의 데이터를 효율적으로 처리할 수 있습니다.



